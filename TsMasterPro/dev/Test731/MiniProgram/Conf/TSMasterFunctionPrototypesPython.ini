[]
=None= log(AStr: str, ALevel: int)

[var]
=Value

[timer]
=Start()
=Stop()
=IntervalMs

[app]
=int ui_get_form_unique_id(AClassName: str, AFormIdx: int)
=int ui_panel_clear_control(APanelName: str, AControlName: str)
=int ui_set_form_unique_id(AOldId: int, ANewId: int)
=int ui_show_form(AFormCaption: str, AShow: bool)
=int ui_kill_form(AFormCaption: str)
=int ui_place_form(AFormCaption: str, ALeft: int, ATop: int, AWidth: int, AHeight: int)
=int ui_toggle_mdi_form(AFormCaption: str, AIsMDI: bool)
=Tuple call_system_api(AAPIName: str, AArgs: typing.List[str])
=Tuple call_library_api(AAPIName: str, AArgs: typing.List[str])
=Component ui_get_component(AWindowCaption: str, AComponentName: str)
=str get_host_app_path()
=int open_help_doc(AFileNameWoSuffix: str, AChapterTitle: str)
=int add_path_to_environment(APath: str)
=int delete_path_from_environment(APath: str)
=int tsdb_unload_can_dbs()
=int tsdb_unload_lin_dbs()
=int tsdb_unload_flexray_dbs()
=int tsdb_unload_can_db(AId: int)
=int tsdb_unload_lin_db(AId: int)
=int tsdb_unload_flexray_db(AId: int)
=int tsdb_load_can_db(AFileName: str, ASupportedChannels: str)
=int tsdb_load_lin_db(AFileName: str, ASupportedChannels: str)
=int tsdb_load_flexray_db(AFileName: str, ASupportedChannels: str)
=int set_current_application(AAppName: str)
=int del_application(AAppName: str)
=int add_application(AAppName: str)
=Strings get_application_list()
=str get_current_application()
=int set_can_channel_count(ACount: int)
=int set_lin_channel_count(ACount: int)
=int set_flexray_channel_count(ACount: int)
=int get_can_channel_count()
=int get_lin_channel_count()
=int get_flexray_channel_count()
=int set_mapping(AAppName: str, AAppChannelType: int, AAppChannelIndex: int, AHWName: str, AHWType: int, AHWSubType: int, AHWIndex: int, AHWChannelIndex: int, AEnabled: bool)
=Tuple get_mapping(AAppName: str, AAppChannelType: int, AAppChannelIndex: int)
=int del_mapping(AAppName: str, AAppChannelType: int, AAppChannelIndex: int)
=int connect()
=int disconnect()
=int log_text(AStr: str, ALevel: int)
=int set_turbo_mode(AEnable: bool)
=bool get_turbo_mode()
=str get_error_description(ACode: int)
=int configure_can_baudrate(AIdxChn: int, ABaudrateKbps: float, AListenOnly: bool, AInstallTermResistor120Ohm: bool)
=int configure_lin_baudrate(AIdxChn: int, ABaudrateKbps: float, AProtocol: int)
=int configure_canfd_baudrate(AIdxChn: int, ABaudrateArbKbps: float, ABaudrateDataKbps: float, AControllerType: int, AControllerMode: int, AInstallTermResistor120Ohm: bool)
=int terminate_application(AInstance: MpInstance)
=int wait(AInstance: MpInstance, ATimeMs: int, AMsg: str)
=bool check(AErrorCode: int)
=bool run_python_script(AScript: str)
=int start_log(AInstance: MpInstance)
=int end_log(AInstance: MpInstance)
=int check_terminate(AInstance: MpInstance)
=int get_timestamp_us()
=bool is_tsmaster_host()
=str get_custom_components_dir()
=int show_confirm_dialog(ATitle: str, APrompt: str, AImage: str, ATimeoutMs: int, ADefaultOK: bool)
=int pause()
=int set_check_failed_terminate(AInstance: MpInstance, AToTerminate: bool)
=bool make_toast(AString: str, ALevel: int)
=Tuple execute_python_string(AString: str, AArguments: str, AIsSync: bool, AIsX64: bool)
=Tuple execute_python_script(AFilePath: str, AArguments: str, AIsSync: bool, AIsX64: bool)
=int execute_app(AAppPath: str, AWorkingDir: str, AParameter: str, AWaitTimeMS: int)
=int terminate_app_by_name(AImageName: str)
=Tuple excel_load(AFileName: str)
=int excel_get_sheet_count(AObj: int)
=int excel_set_sheet_count(AObj: int, ACount: int)
=Tuple excel_get_sheet_name(AObj: int, AIdxSheet: int)
=int excel_set_sheet_name(AObj: int, AIdxSheet: int, AName: str)
=Tuple excel_get_cell_count(AObj: int, AIdxSheet: int)
=Tuple excel_get_cell_value(AObj: int, AIdxSheet: int, AIdxRow: int, AIdxCol: int)
=int excel_set_cell_count(AObj: int, AIdxSheet: int, ARowCount: int, AColCount: int)
=int excel_set_cell_value(AObj: int, AIdxSheet: int, AIdxRow: int, AIdxCol: int, AValue: str)
=int excel_unload(AObj: int)
=int excel_unload_all()
=int print_system_var_value(ACompleteName: str)
=Tuple call_mini_program_api(ALibName: str, AFuncName: str, AInParameters: str)
=int wait_system_var_existance(ACompleteName: str, ATimeOutMs: int)
=int wait_system_var_disappear(ACompleteName: str, ATimeOutMs: int)
=int set_analysis_time_range(ATimeStartUs: int, ATimeEndUs: int)
=str get_configuration_file_name()
=str get_configuration_file_path()
=int set_default_output_dir(APath: str)
=int save_screenshot(AFormCaption: str, AFilePath: str)
=int enable_all_graphics(AEnable: bool, AExceptCaption: str)
=Tuple get_tsmaster_version()
=int ui_show_page_by_index(AIndex: int)
=int ui_show_page_by_name(AName: str)
=int write_realtime_comment(AInstance: MpInstance, AName: str)
=int set_thread_priority(AInstance: MpInstance, APriority: int)
=int set_system_var_generic(ACompleteName: str, AValue: str)
=int set_system_var_generic_async(ACompleteName: str, AValue: str)
=Tuple write_text_file_start(AFileName: str)
=int write_text_file_line(AHandle: int, ALine: str)
=int write_text_file_line_double_array(AHandle: int, AArray: typing.List[float])
=int write_text_file_line_string_array(AHandle: int, AArray: typing.List[str])
=int write_text_file_end(AHandle: int)
=int force_directory(ADir: str)
=int directory_exists(ADir: str)
=int open_directory_and_select_file(AFileName: str)
=int mini_delay_cpu()
=int wait_system_var(ACompleteName: str, AValue: str, ATimeOutMs: int)
=Tuple write_mat_file_start(AFileName: str)
=int write_mat_file_variable_double(AHandle: int, AVarName: str, AValue: float)
=int write_mat_file_variable_string(AHandle: int, AVarName: str, AValue: str)
=int write_mat_file_variable_double_array(AHandle: int, AVarName: str, AArray: typing.List[float])
=int write_mat_file_end(AHandle: int)
=Tuple read_mat_file_start(AFileName: str)
=Tuple read_mat_file_variable_count(AHandle: int, AVarName: str)
=Tuple read_mat_file_variable_string(AHandle: int, AVarName: str)
=Tuple read_mat_file_variable_double(AHandle: int, AVarName: str, AStartIdx: int, ACount: int)
=int read_mat_file_end(AHandle: int)
=Tuple prompt_user_input_value(APrompt: str)
=Tuple prompt_user_input_string(APrompt: str)
=Tuple ini_create(AFileName: str)
=int ini_write_int32(AHandle: int, ASection: str, AKey: str, AValue: int)
=int ini_write_int64(AHandle: int, ASection: str, AKey: str, AValue: int)
=int ini_write_bool(AHandle: int, ASection: str, AKey: str, AValue: bool)
=int ini_write_float(AHandle: int, ASection: str, AKey: str, AValue: float)
=int ini_write_string(AHandle: int, ASection: str, AKey: str, AValue: str)
=Tuple ini_read_int32(AHandle: int, ASection: str, AKey: str, ADefault: int)
=Tuple ini_read_int64(AHandle: int, ASection: str, AKey: str, ADefault: int)
=Tuple ini_read_bool(AHandle: int, ASection: str, AKey: str, ADefault: bool)
=Tuple ini_read_float(AHandle: int, ASection: str, AKey: str, ADefault: float)
=Tuple ini_read_string(AHandle: int, ASection: str, AKey: str, ADefault: str)
=int ini_section_exists(AHandle: int, ASection: str)
=int ini_key_exists(AHandle: int, ASection: str, AKey: str)
=int ini_delete_key(AHandle: int, ASection: str, AKey: str)
=int ini_delete_section(AHandle: int, ASection: str)
=int ini_close(AHandle: int)
=str get_doc_path()
=Tuple get_hardware_id_string()
=Tuple get_hardware_id_array()
=int create_system_var(ACompleteName: str, AType: int, ADefaultValue: str, AComment: str)
=int delete_system_var(ACompleteName: str)
=int get_system_var_internal_count()
=int get_system_var_user_count()
=Tuple get_system_var_def_by_index(AIsUser: bool, AIndex: int)
=Tuple get_system_var_def_by_name(AIsUser: bool, ACompleteName: str)
=Tuple get_system_var_value(ACompleteName: str)
=Tuple get_system_var_generic(ACompleteName: str)
=int run_form(AFormCaption: str)
=int stop_form(AFormCaption: str)
=int clear_measurement_form(AFormCaption: str)
=Tuple read_text_file_start(AFileName: str)
=Tuple read_text_file_line(AHandle: int)
=int read_text_file_end(AHandle: int)
=int play_sound(AIsSync: bool, AWaveFileName: str)
=int set_system_var_unit(ACompleteName: str, AUnit: str)
=int set_system_var_value_table(ACompleteName: str, ATable: str)
=int load_plugin(APluginName: str)
=int unload_plugin(APluginName: str)
=int set_system_var_double_async(ACompleteName: str, AValue: float)
=int set_system_var_int32_async(ACompleteName: str, AValue: int)
=int set_system_var_uint32_async(ACompleteName: str, AValue: int)
=int set_system_var_int64_from_string_async(ACompleteName: str, AValue: str)
=int set_system_var_uint64_from_string_async(ACompleteName: str, AValue: str)
=int set_system_var_uint8_array_async(ACompleteName: str, AValue: typing.List[int])
=int set_system_var_int32_array_async(ACompleteName: str, AValue: typing.List[int])
=int set_system_var_int64_array_from_string_async(ACompleteName: str, AValue: typing.List[str])
=int set_system_var_double_array_async(ACompleteName: str, AValue: typing.List[float])
=int set_system_var_string_async(ACompleteName: str, AString: str)
=int set_system_var_double(ACompleteName: str, AValue: float)
=int set_system_var_int32(ACompleteName: str, AValue: int)
=int set_system_var_uint32(ACompleteName: str, AValue: int)
=int set_system_var_int64_from_string(ACompleteName: str, AValue: str)
=int set_system_var_uint64_from_string(ACompleteName: str, AValue: str)
=int set_system_var_uint8_array(ACompleteName: str, AValue: typing.List[int])
=int set_system_var_int32_array(ACompleteName: str, AValue: typing.List[int])
=int set_system_var_int64_array_from_string(ACompleteName: str, AValue: typing.List[str])
=int set_system_var_double_array(ACompleteName: str, AValue: typing.List[float])
=int set_system_var_string(ACompleteName: str, AString: str)
=Tuple am_get_running_state(AModuleName: str)
=int am_run(AModuleName: str, ASubModuleName: str, AParameterGroupName: str, AIsSync: bool)
=int am_stop(AModuleName: str, AIsSync: bool)
=int am_select_sub_module(AIsSelect: bool, AModuleName: str, ASubModuleName: str, AParameterGroupName: str)
=int panel_set_enable(APanelName: str, AControlName: str, AEnable: bool)
=int panel_set_position_x(APanelName: str, AControlName: str, AX: float)
=int panel_set_position_y(APanelName: str, AControlName: str, AY: float)
=int panel_set_position_xy(APanelName: str, AControlName: str, AX: float, AY: float)
=int panel_set_opacity(APanelName: str, AControlName: str, AOpacity: float)
=int panel_set_width(APanelName: str, AControlName: str, AWidth: float)
=int panel_set_height(APanelName: str, AControlName: str, AHeight: float)
=int panel_set_width_height(APanelName: str, AControlName: str, AWidth: float, AHeight: float)
=int panel_set_rotation_angle(APanelName: str, AControlName: str, AAngleDegree: float)
=int panel_set_rotation_center(APanelName: str, AControlName: str, ARatioX: float, ARatioY: float)
=int panel_set_scale_x(APanelName: str, AControlName: str, AScaleX: float)
=int panel_set_scale_y(APanelName: str, AControlName: str, AScaleY: float)
=int panel_set_bkgd_color(APanelName: str, AControlName: str, AAlphaColor: int)
=Tuple panel_get_enable(APanelName: str, AControlName: str)
=Tuple panel_get_position_xy(APanelName: str, AControlName: str)
=Tuple panel_get_opacity(APanelName: str, AControlName: str)
=Tuple panel_get_width_height(APanelName: str, AControlName: str)
=Tuple panel_get_rotation_angle(APanelName: str, AControlName: str)
=Tuple panel_get_rotation_center(APanelName: str, AControlName: str)
=Tuple panel_get_scale_xy(APanelName: str, AControlName: str)
=Tuple panel_get_bkgd_color(APanelName: str, AControlName: str)
=int stim_set_signal_status(ASTIMName: str, AUserLabel: str, AStatus: int)
=Tuple stim_get_signal_status(ASTIMName: str, AUserLabel: str)
=Tuple get_system_var_address(ACompleteName: str)
=int set_system_var_logging(ACompleteName: str, AIsLogging: bool)
=Tuple get_system_var_logging(ACompleteName: str)
=Tuple get_main_window_handle()
=int print_delta_time(AInfo: str)
=Tuple get_constant_double(AName: str)
=int add_direct_mapping_can(ADestinationVarName: str, ASignalAddress: str, ADirection: int)
=int add_expression_mapping(ADestinationVarName: str, AExpression: str, AArguments: str)
=int delete_symbol_mapping_item(ADestinationVarName: str)
=int enable_symbol_mapping_item(ADestinationVarName: str, AEnable: bool)
=int enable_symbol_mapping_engine(AEnable: bool)
=int delete_symbol_mapping_items()
=int save_symbol_mapping_settings(AFileName: str)
=int load_symbol_mapping_settings(AFileName: str)
=int add_direct_mapping_with_factor_offset_can(ADestinationVarName: str, ASignalAddress: str, ADirection: int, AFactor: float, AOffset: float)
=int debug_log(AInstance: MpInstance, AFile: str, AFunc: str, ALine: int, AStr: str, ALevel: int)
=bool is_connected()
=Tuple tsdb_get_can_db_count()
=Tuple tsdb_get_lin_db_count()
=Tuple tsdb_get_flexray_db_count()
=Tuple tsdb_get_can_db_properties_by_index(ADBIndex: int)
=Tuple tsdb_get_lin_db_properties_by_index(ADBIndex: int)
=Tuple tsdb_get_flexray_db_properties_by_address(AAddr: str)
=Tuple tsdb_get_flexray_db_properties_by_index(ADBIndex: int)
=Tuple tsdb_get_flexray_ecu_properties_by_address(AAddr: str)
=Tuple tsdb_get_flexray_ecu_properties_by_index(ADBIndex: int, AECUIndex: int)
=Tuple tsdb_get_flexray_frame_properties_by_address(AAddr: str)
=Tuple tsdb_get_flexray_frame_properties_by_index(ADBIndex: int, AECUIndex: int, AFrameIndex: int, AIsTx: bool)
=Tuple tsdb_get_flexray_signal_properties_by_address(AAddr: str)
=Tuple tsdb_get_flexray_signal_properties_by_index(ADBIndex: int, AECUIndex: int, AFrameIndex: int, ASignalIndex: int, AIsTx: bool)
=Tuple tsdb_get_can_ecu_properties_by_index(ADBIndex: int, AECUIndex: int)
=Tuple tsdb_get_lin_ecu_properties_by_index(ADBIndex: int, AECUIndex: int)
=Tuple tsdb_get_can_frame_properties_by_index(ADBIndex: int, AECUIndex: int, AFrameIndex: int, AIsTx: bool)
=Tuple tsdb_get_lin_frame_properties_by_index(ADBIndex: int, AECUIndex: int, AFrameIndex: int, AIsTx: bool)
=Tuple tsdb_get_can_signal_properties_by_index(ADBIndex: int, AECUIndex: int, AFrameIndex: int, ASignalIndex: int, AIsTx: bool)
=Tuple tsdb_get_lin_signal_properties_by_index(ADBIndex: int, AECUIndex: int, AFrameIndex: int, ASignalIndex: int, AIsTx: bool)
=Tuple tsdb_get_can_db_properties_by_address(AAddr: str)
=Tuple tsdb_get_lin_db_properties_by_address(AAddr: str)
=Tuple tsdb_get_can_ecu_properties_by_address(AAddr: str)
=Tuple tsdb_get_lin_ecu_properties_by_address(AAddr: str)
=Tuple tsdb_get_can_frame_properties_by_address(AAddr: str)
=Tuple tsdb_get_lin_frame_properties_by_address(AAddr: str)
=Tuple tsdb_get_can_signal_properties_by_address(AAddr: str)
=Tuple tsdb_get_lin_signal_properties_by_address(AAddr: str)
=int panel_set_selector_items(APanelName: str, AControlName: str, AItemsList: str)
=Tuple panel_get_selector_items(APanelName: str, AControlName: str)
=Form show_window_system_messages()
=Tuple tsdb_get_can_frame_properties_by_db_index(ADBIndex: int, AIndex: int)
=Tuple tsdb_get_lin_frame_properties_by_db_index(ADBIndex: int, AIndex: int)
=Tuple tsdb_get_flexray_frame_properties_by_db_index(ADBIndex: int, AIndex: int)
=Tuple tsdb_get_can_signal_properties_by_db_index(ADBIndex: int, AIndex: int)
=Tuple tsdb_get_lin_signal_properties_by_db_index(ADBIndex: int, AIndex: int)
=Tuple tsdb_get_flexray_signal_properties_by_db_index(ADBIndex: int, AIndex: int)
=Tuple tsdb_get_can_signal_properties_by_frame_index(ADBIndex: int, AIdxFrame: int, ASgnIndexInFrame: int)
=Tuple tsdb_get_lin_signal_properties_by_frame_index(ADBIndex: int, AIdxFrame: int, ASgnIndexInFrame: int)
=Tuple tsdb_get_flexray_signal_properties_by_frame_index(ADBIndex: int, AIdxFrame: int, ASgnIndexInFrame: int)
=int add_system_constant(AName: str, AValue: float, ADescription: str)
=int delete_system_constant(AName: str)
=int ui_show_save_file_dialog(ATitle: str, AFileTypeDesc: str, AFilter: str, ASuggestFileName: str)
=int ui_show_open_file_dialog(ATitle: str, AFileTypeDesc: str, AFilter: str, ASuggestFileName: str)
=int ui_show_select_directory_dialog()

[com]
=int block_current_pretx(AInstance: MpInstance)
=int transmit_can_async(ACAN: RawCAN)
=int transmit_lin_async(ALIN: RawLIN)
=int transmit_flexray_async(AFlexRay: RawFlexRay)
=int transmit_can_async_wo_pretx(ACAN: RawCAN)
=int transmit_lin_async_wo_pretx(ALIN: RawLIN)
=int transmit_flexray_async_wo_pretx(AFlexRay: RawFlexRay)
=int transmit_can_sync(ACAN: RawCAN, ATimeOutMs: int)
=int transmit_lin_sync(ALIN: RawLIN, ATimeOutMs: int)
=int transmit_flexray_sync(AFlexRay: RawFlexRay, ATimeOutMs: int)
=int wait_can_message(AInstance: MpInstance, ATxCAN: RawCAN, ARxCAN: RawCAN, ATimeOutMs: int)
=int add_cyclic_message_can(ACAN: RawCAN, APeriodMS: float)
=int del_cyclic_message_can(ACAN: RawCAN)
=int del_cyclic_messages()
=float get_can_signal_value(ACANSignal: CANSignal, AData: List)
=void set_can_signal_value(ACANSignal: CANSignal, AData: List, AValue: float)
=float get_lin_signal_value(ALINSignal: LINSignal, AData: List)
=void set_lin_signal_value(ALINSignal: LINSignal, AData: List, AValue: float)
=int enable_bus_statistics(AEnable: bool)
=int clear_bus_statistics()
=Tuple get_bus_statistics(ABusType: int, AIdxChn: int, AIdxStat: int)
=Tuple get_fps_can(AIdxChn: int, AIdentifier: int)
=Tuple get_fps_canfd(AIdxChn: int, AIdentifier: int)
=Tuple get_fps_lin(AIdxChn: int, AIdentifier: int)
=Tuple tslog_add_online_replay_config(AFileName: str)
=int tslog_set_online_replay_config(AIndex: int, AName: str, AFileName: str, AAutoStart: bool, AIsRepetitiveMode: bool, AStartTimingMode: int, AStartDelayTimeMs: int, ASendTx: bool, ASendRx: bool, AMappings: str)
=Tuple tslog_get_online_replay_count()
=Tuple tslog_get_online_replay_config(AIndex: int)
=int tslog_del_online_replay_config(AIndex: int)
=int tslog_del_online_replay_configs()
=int tslog_start_online_replay(AIndex: int)
=int tslog_start_online_replays()
=int tslog_pause_online_replay(AIndex: int)
=int tslog_pause_online_replays()
=int tslog_stop_online_replay(AIndex: int)
=int tslog_stop_online_replays()
=Tuple tslog_get_online_replay_status(AIndex: int)
=int can_rbs_start()
=int can_rbs_stop()
=bool can_rbs_is_running()
=int can_rbs_configure(AAutoStart: bool, AAutoSendOnModification: bool, AActivateNodeSimulation: bool, AInitValueOptions: int)
=int can_rbs_activate_all_networks(AEnable: bool, AIncludingChildren: bool)
=int can_rbs_activate_network_by_name(AIdxChn: int, AEnable: bool, ANetworkName: str, AIncludingChildren: bool)
=int can_rbs_activate_node_by_name(AIdxChn: int, AEnable: bool, ANetworkName: str, ANodeName: str, AIncludingChildren: bool)
=int can_rbs_activate_message_by_name(AIdxChn: int, AEnable: bool, ANetworkName: str, ANodeName: str, AMsgName: str)
=int can_rbs_set_message_cycle_by_name(AIdxChn: int, AIntervalMs: int, ANetworkName: str, ANodeName: str, AMsgName: str)
=Tuple can_rbs_get_signal_value_by_element(AIdxChn: int, ANetworkName: str, ANodeName: str, AMsgName: str, ASignalName: str)
=Tuple can_rbs_get_signal_value_by_address(ASymbolAddress: str)
=int can_rbs_set_signal_value_by_element(AIdxChn: int, ANetworkName: str, ANodeName: str, AMsgName: str, ASignalName: str, AValue: float)
=int can_rbs_set_signal_value_by_address(ASymbolAddress: str, AValue: float)
=Tuple tslog_blf_write_start(AFileName: str)
=Tuple tslog_blf_write_start_w_timestamp(AFileName: str, AYear: int, AMonth: int, ADay: int, AHour: int, AMinute: int, ASecond: int, AMilliseconds: int)
=int tslog_blf_write_set_max_count(AHandle: int, ACount: int)
=int tslog_blf_write_can(AHandle: int, ACAN: RawCAN)
=int tslog_blf_write_lin(AHandle: int, ALIN: RawLIN)
=int tslog_blf_write_flexray(AHandle: int, AFlexRay: RawFlexRay)
=int tslog_blf_write_realtime_comment(AHandle: int, ATimeUs: int, AComment: str)
=int tslog_blf_write_end(AHandle: int)
=Tuple tslog_blf_read_start(AFileName: str)
=Tuple tslog_blf_read_status(AHandle: int)
=Tuple tslog_blf_read_object(AHandle: int)
=Tuple tslog_blf_read_object_w_comment(AHandle: int)
=int tslog_blf_read_end(AHandle: int)
=Tuple tslog_blf_seek_object_time(AHandle: int, AProg100: float)
=int tslog_blf_to_asc(ABLFFileName: str, AASCFileName: str)
=int tslog_asc_to_blf(AASCFileName: str, ABLFFileName: str)
=Tuple ioip_create(AInstance: MpInstance, APortTCP: int, APortUDP: int)
=int ioip_delete(AInstance: MpInstance, AHandle: int)
=int ioip_enable_tcp_server(AInstance: MpInstance, AHandle: int, AEnable: bool)
=int ioip_enable_udp_server(AInstance: MpInstance, AHandle: int, AEnable: bool)
=int ioip_connect_tcp_server(AInstance: MpInstance, AHandle: int, AIpAddress: str, APort: int)
=int ioip_connect_udp_server(AInstance: MpInstance, AHandle: int, AIpAddress: str, APort: int)
=int ioip_disconnect_tcp_server(AInstance: MpInstance, AHandle: int)
=int ioip_send_buffer_tcp(AInstance: MpInstance, AHandle: int, ABuffer: typing.List[int])
=int ioip_send_buffer_udp(AInstance: MpInstance, AHandle: int, ABuffer: typing.List[int])
=Tuple ioip_receive_tcp_client_response(AInstance: MpInstance, AHandle: int, ATimeOutMs: int)
=int ioip_send_tcp_server_response(AInstance: MpInstance, AHandle: int, ABuffer: typing.List[int])
=int ioip_send_udp_broadcast(AInstance: MpInstance, AHandle: int, APort: int, ABuffer: typing.List[int])
=int ioip_set_udp_server_buffer_size(AInstance: MpInstance, AHandle: int, ASize: int)
=Tuple ioip_receive_udp_client_response(AInstance: MpInstance, AHandle: int, ATimeOutMs: int)
=int ioip_send_udp_server_response(AInstance: MpInstance, AHandle: int, ABuffer: typing.List[int])
=Tuple sgnsrv_register_can_signal_by_msg_identifier(AIdxChn: int, AMsgId: int, ASgnName: str)
=Tuple sgnsrv_register_lin_signal_by_msg_identifier(AIdxChn: int, AMsgId: int, ASgnName: str)
=Tuple sgnsrv_register_can_signal_by_msg_name(AIdxChn: int, ANetworkName: str, AMsgName: str, ASgnName: str)
=Tuple sgnsrv_register_lin_signal_by_msg_name(AIdxChn: int, ANetworkName: str, AMsgName: str, ASgnName: str)
=Tuple sgnsrv_get_can_signal_phy_value_latest(AIdxChn: int, AClientId: int)
=Tuple sgnsrv_get_lin_signal_phy_value_latest(AIdxChn: int, AClientId: int)
=Tuple sgnsrv_get_can_signal_phy_value_in_msg(AIdxChn: int, AClientId: int, ACAN: RawCAN)
=Tuple sgnsrv_get_lin_signal_phy_value_in_msg(AIdxChn: int, AClientId: int, ALIN: RawLIN)
=Tuple sgnsrv_register_flexray_signal_by_frame(AIdxChn: int, AChnMask: int, ACycleNumber: int, ASlotId: int, ASgnName: str)
=Tuple sgnsrv_register_flexray_signal_by_frame_name(AIdxChn: int, ANetworkName: str, AFrameName: str, ASgnName: str)
=Tuple sgnsrv_get_flexray_signal_phy_value_latest(AIdxChn: int, AClientId: int)
=Tuple sgnsrv_get_flexray_signal_phy_value_in_frame(AIdxChn: int, AClientId: int, AFlexRay: RawFlexRay)
=int can_rbs_enable(AEnable: bool)
=int can_rbs_batch_set_start()
=int can_rbs_batch_set_end()
=int inject_can_message(ACAN: RawCAN)
=int inject_lin_message(ALIN: RawLIN)
=int inject_flexray_frame(AFlexRay: RawFlexRay)
=int can_rbs_batch_set_signal(ASymbolAddress: str, AValue: float)
=int can_rbs_set_message_direction(AIdxChn: int, AIsTx: bool, ANetworkName: str, ANodeName: str, AMsgName: str)
=int can_pdu_container_set_cycle_count(AIdxChn: int, AMsgId: int, ACount: int)
=int can_pdu_container_set_cycle_by_index(AIdxChn: int, AMsgId: int, AIdxCycle: int, ASignalGroupIdList: str)
=Tuple can_pdu_container_get_cycle_count(AIdxChn: int, AMsgId: int)
=Tuple can_pdu_container_get_cycle_by_index(AIdxChn: int, AMsgId: int, AIdxCycle: int)
=int can_pdu_container_refresh(AIdxChn: int, AMsgId: int)
=int can_rbs_fault_inject_clear()
=int can_rbs_fault_inject_message_lost(AEnable: bool, AIdxChn: int, AIdentifier: int)
=int can_rbs_fault_inject_signal_alter(AEnable: bool, ASymbolAddress: str, AAlterValue: float)
=int j1939_make_id(APGN: int, ASource: int, ADestination: int, APriority: int)
=Tuple j1939_extract_id(AIdentifier: int)
=int j1939_get_pgn(AIdentifier: int)
=int j1939_get_source(AIdentifier: int)
=int j1939_get_destination(AIdentifier: int)
=int j1939_get_priority(AIdentifier: int)
=int j1939_get_r(AIdentifier: int)
=int j1939_get_dp(AIdentifier: int)
=int j1939_get_edp(AIdentifier: int)
=int j1939_set_pgn(pAIdentifier: int, APGN: int)
=int j1939_set_source(pAIdentifier: int, ASource: int)
=int j1939_set_destination(pAIdentifier: int, ADestination: int)
=int j1939_set_priority(pAIdentifier: int, APriority: int)
=int j1939_set_r(pAIdentifier: int, AR: int)
=int j1939_set_dp(pAIdentifier: int, ADP: int)
=int j1939_set_edp(pAIdentifier: int, AEDP: int)
=Tuple j1939_get_last_pdu(AIdxChn: int, AIdentifier: int, AIsTx: bool)
=Tuple j1939_get_last_pdu_as_string(AIdxChn: int, AIdentifier: int, AIsTx: bool)
=int j1939_transmit_pdu_async(AIdxChn: int, APGN: int, APriority: int, ASource: int, ADestination: int, APDUData: typing.List[int])
=int j1939_transmit_pdu_sync(AIdxChn: int, APGN: int, APriority: int, ASource: int, ADestination: int, APDUData: typing.List[int], ATimeOutMs: int)
=int j1939_transmit_pdu_as_string_async(AIdxChn: int, APGN: int, APriority: int, ASource: int, ADestination: int, APDUData: str)
=int j1939_transmit_pdu_as_string_sync(AIdxChn: int, APGN: int, APriority: int, ASource: int, ADestination: int, APDUData: str, ATimeOutMs: int)
=int can_rbs_set_normal_signal(ASymbolAddress: str)
=int can_rbs_set_rc_signal(ASymbolAddress: str)
=int can_rbs_set_crc_signal(ASymbolAddress: str, AAlgorithmName: str, AIdxByteStart: int, AByteCount: int)
=int can_rbs_set_rc_signal_with_limit(ASymbolAddress: str, ALowerLimit: int, AUpperLimit: int)
=float get_flexray_signal_value(AFlexRaySignal: FlexRaySignal, AData: List)
=void set_flexray_signal_value(AFlexRaySignal: FlexRaySignal, AData: List, AValue: float)
=int flexray_rbs_start()
=int flexray_rbs_stop()
=bool flexray_rbs_is_running()
=int flexray_rbs_configure(AAutoStart: bool, AAutoSendOnModification: bool, AActivateECUSimulation: bool, AInitValueOptions: int)
=int flexray_rbs_enable(AEnable: bool)
=int flexray_rbs_activate_all_clusters(AEnable: bool, AIncludingChildren: bool)
=int flexray_rbs_activate_cluster_by_name(AIdxChn: int, AEnable: bool, AClusterName: str, AIncludingChildren: bool)
=int flexray_rbs_activate_ecu_by_name(AIdxChn: int, AEnable: bool, AClusterName: str, AECUName: str, AIncludingChildren: bool)
=int flexray_rbs_activate_frame_by_name(AIdxChn: int, AEnable: bool, AClusterName: str, AECUName: str, AFrameName: str)
=Tuple flexray_rbs_get_signal_value_by_element(AIdxChn: int, AClusterName: str, AECUName: str, AFrameName: str, ASignalName: str)
=Tuple flexray_rbs_get_signal_value_by_address(ASymbolAddress: str)
=int flexray_rbs_set_signal_value_by_element(AIdxChn: int, AClusterName: str, AECUName: str, AFrameName: str, ASignalName: str, AValue: float)
=int flexray_rbs_set_signal_value_by_address(ASymbolAddress: str, AValue: float)
=int flexray_rbs_batch_set_start()
=int flexray_rbs_batch_set_end()
=int flexray_rbs_batch_set_signal(ASymbolAddress: str, AValue: float)
=int flexray_rbs_set_frame_direction(AIdxChn: int, AIsTx: bool, AClusterName: str, AECUName: str, AFrameName: str)
=int flexray_rbs_set_normal_signal(ASymbolAddress: str)
=int flexray_rbs_set_rc_signal(ASymbolAddress: str)
=int flexray_rbs_set_rc_signal_with_limit(ASymbolAddress: str, ALowerLimit: int, AUpperLimit: int)
=int flexray_rbs_set_crc_signal(ASymbolAddress: str, AAlgorithmName: str, AIdxByteStart: int, AByteCount: int)
=int flexray_rbs_update_frame_by_header(AIdxChn: int, AFrameHash: int)
=int lin_rbs_start()
=int lin_rbs_stop()
=bool lin_rbs_is_running()
=int lin_rbs_configure(AAutoStart: bool, AAutoSendOnModification: bool, AActivateNodeSimulation: bool, AInitValueOptions: int)
=int lin_rbs_activate_all_networks(AEnable: bool, AIncludingChildren: bool)
=int lin_rbs_activate_network_by_name(AIdxChn: int, AEnable: bool, ANetworkName: str, AIncludingChildren: bool)
=int lin_rbs_activate_node_by_name(AIdxChn: int, AEnable: bool, ANetworkName: str, ANodeName: str, AIncludingChildren: bool)
=int lin_rbs_activate_message_by_name(AIdxChn: int, AEnable: bool, ANetworkName: str, ANodeName: str, AMsgName: str)
=int lin_rbs_set_message_delay_time_by_name(AIdxChn: int, AIntervalMs: int, ANetworkName: str, ANodeName: str, AMsgName: str)
=Tuple lin_rbs_get_signal_value_by_element(AIdxChn: int, ANetworkName: str, ANodeName: str, AMsgName: str, ASignalName: str)
=Tuple lin_rbs_get_signal_value_by_address(ASymbolAddress: str)
=int lin_rbs_set_signal_value_by_element(AIdxChn: int, ANetworkName: str, ANodeName: str, AMsgName: str, ASignalName: str, AValue: float)
=int lin_rbs_set_signal_value_by_address(ASymbolAddress: str, AValue: float)
=int lin_rbs_enable(AEnable: bool)
=int lin_rbs_batch_set_start()
=int lin_rbs_batch_set_end()
=int lin_rbs_batch_set_signal(ASymbolAddress: str, AValue: float)

[test]
=int set_verdict_ok(AMsg: str)
=int set_verdict_nok(AMsg: str)
=int set_verdict_cok(AMsg: str)
=int log_info(AInstance: MpInstance, AMsg: str, ALevel: int)
=void log_value(AInstance: MpInstance, AMsg: str, AValue: float, ALevel: int)
=void log_string(AInstance: MpInstance, AMsg: str, AValue: str, ALevel: int)
=void write_result_string(AInstance: MpInstance, AName: str, AValue: str, ALevel: int)
=void write_result_value(AInstance: MpInstance, AName: str, AValue: float, ALevel: int)
=void check_error_begin()
=Tuple check_error_end()
=int write_result_image(AInstance: MpInstance, AName: str, AImageFileFullPath: str)
=Tuple retrieve_current_result_folder(AInstance: MpInstance)
=int check_test_terminate()
=int check_verdict(AInstance: MpInstance, AName: str, AValue: float, AMin: float, AMax: float)
=int signal_checker_clear()
=Tuple signal_checker_add_check_with_time(ASgnType: int, ACheckKind: int, ASgnName: str, ASgnMin: float, ASgnMax: float, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_check_with_trigger(ASgnType: int, ACheckKind: int, ASgnName: str, ASgnMin: float, ASgnMax: float, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_statistics_with_time(ASgnType: int, AStatisticsKind: int, ASgnName: str, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_statistics_with_trigger(ASgnType: int, AStatisticsKind: int, ASgnName: str, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_get_result(AInstance: MpInstance, ACheckId: int)
=int signal_checker_enable(ACheckId: int, AEnable: bool)
=int debug_log_info(AInstance: MpInstance, AFile: str, AFunc: str, ALine: int, AStr: str, ALevel: int)
=Tuple signal_checker_add_rising_edge_with_time(ASgnType: int, ASgnName: str, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_rising_edge_with_trigger(ASgnType: int, ASgnName: str, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_falling_edge_with_time(ASgnType: int, ASgnName: str, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_falling_edge_with_trigger(ASgnType: int, ASgnName: str, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_monotony_rising_with_time(ASgnType: int, ASgnName: str, ASampleIntervalMs: int, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_monotony_rising_with_trigger(ASgnType: int, ASgnName: str, ASampleIntervalMs: int, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_monotony_falling_with_time(ASgnType: int, ASgnName: str, ASampleIntervalMs: int, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_monotony_falling_with_trigger(ASgnType: int, ASgnName: str, ASampleIntervalMs: int, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_follow_with_time(ASgnType: int, AFollowSignalType: int, ASgnName: str, AFollowSgnName: str, AErrorRange: float, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_follow_with_trigger(ASgnType: int, AFollowSignalType: int, ASgnName: str, AFollowSgnName: str, AErrorRange: float, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_jump_with_time(ASgnType: int, ASgnName: str, AIgnoreFrom: bool, AFrom: float, ATo: float, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_jump_with_trigger(ASgnType: int, ASgnName: str, AIgnoreFrom: bool, AFrom: float, ATo: float, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_add_unchange_with_time(ASgnType: int, ASgnName: str, ATimeStartS: float, ATimeEndS: float)
=Tuple signal_checker_add_unchange_with_trigger(ASgnType: int, ASgnName: str, ATriggerType: int, ATriggerName: str, ATriggerMin: float, ATriggerMax: float)
=Tuple signal_checker_check_statistics(AInstance: MpInstance, ACheckId: int, AMin: float, AMax: float)
